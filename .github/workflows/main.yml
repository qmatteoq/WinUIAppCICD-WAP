name: WinUI application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:

  build:
   
    runs-on: windows-2022
    
    env:
      Solution_Name: WinUIAppCICD-WAP.sln                 

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Use Nerdbank.GitVersioning to set version variables
      uses: dotnet/nbgv@v0.4.0
      with:
        setAllVars: true

    - name: Update manifest version
      run: |
        [xml]$manifest = get-content ${{env.manifestPath}}
        $manifest.Package.Identity.Version = "${{env.NBGV_SimpleVersion}}.0"
        $manifest.save("${{env.manifestPath}}")  
      env: 
        manifestPath: .\WinUIAppCICD-WAP\Package.appxmanifest

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild ${{ env.Solution_Name }} /restore /p:Platform=${{ env.Appx_Bundle_Platforms }} /p:AppxBundlePlatforms=${{ env.Appx_Bundle_Platforms }} /p:Configuration=${{ env.Configuration }} /p:UapAppxPackageBuildMode=${{ env.Appx_Package_Build_Mode }} /p:AppxBundle=${{ env.Appx_Bundle }} /p:AppxPackageDir=${{github.workspace}}\AppPackages\ /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Never
        Appx_Bundle_Platforms: x64
        Appx_Package_Build_Mode: SideloadOnly
        Configuration: Release

    - name: Set the version
      run: echo "version=${{env.NBGV_SimpleVersion}}" >> $GITHUB_ENV
    # Remove the pfx
    #- name: Remove the pfx
    #  run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{github.workspace}}\AppPackages

  deploy:

    runs-on: windows-2022
    needs: [ build ]

    steps:

      - uses: actions/download-artifact@v2
        with:
          name: MSIX Package
          path: MSIX-package

      - name: Decode the pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.CERTIFICATE }}")
          [IO.File]::WriteAllBytes("${{ github.workspace}}\MSIX-package\GitHubActionsWorkflow.pfx", $pfx_cert_byte)

      - name: Sign package
        run: |
              Get-ChildItem -recurse -Include *.msix | ForEach-Object {
              $msixPath = $_.FullName
              & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.22000.0/x64/signtool.exe" sign /f "${{ github.workspace}}\MSIX-package\GitHubActionsWorkflow.pfx" /p ${{ secrets.PASSWORD }} /fd SHA256 $msixPath
              }  

      - name: Remove the pfx
        run: Remove-Item -path MSIX-package/GitHubActionsWorkflow.pfx

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Signed MSIX Package
          path: MSIX-package
      
